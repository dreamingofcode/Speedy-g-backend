package com.speedy.backend.controllers;

import com.speedy.backend.models.Review;
import com.speedy.backend.repositories.ReviewRepository;
import com.speedy.backend.service.ReviewDAOService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/review") // This means URL's start with /demo (after Application path)
public class ReviewResource {

    @Autowired
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ReviewRepository reviewRepository;

//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewReview (@RequestParam  Integer index, @RequestParam String comment,
//                                              @RequestParam String client, @RequestParam String date, @RequestParam Integer rating, @RequestParam String location) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        Review n = new Review();
//        n.setIndex(index);
//        n.setComment(comment);
//        n.setClient(client);
//        n.setDate(date);
//        n.setRating(rating);
//        n.setLocation(location);
//        reviewRepository.save(n);
//        return "Saved";
//    }
    @PostMapping("/add")
    ///@Valid instead of Validated, validation api not available for gradle?
    public  @ResponseBody
    Review addNewReview (@RequestBody Review review){ //this maps from request body and pulls parameters
        Review savedReview = ReviewDAOService.save(review);


        return savedReview;
    }




    @GetMapping(path="/all")
    public @ResponseBody
    Iterable<Review> getAllReviews() {
        // This returns a JSON or XML with the users
        return reviewRepository.findAll();
    }

//    @GetMapping("/users/{id}")
//    public User retrieveUser(@PathVariable int id){
//        User user = userService.findUser(id);
//        if(user==null)
//            throw new UserNotFoundException("id-"+id);//used to throw error if no available/existing user
//        return user;
//    }

    @GetMapping(path="/{id}")
    public Review retrieveReview(@PathVariable int id){
        Review review = ReviewDAOService.findReview(id);
        String response= "User Not found or non-existent!";
        if(review==null){
            return null;}
        else{
  return review;}
    }

//    @DeleteMapping(path="{id}")
//    public void deleteUserById(@PathVariable("id") int id){
//        userService.deleteUser(id);
//    }
//
//    @PutMapping(path="{id}")
//    public void updateUser( @PathVariable("id") int id,@Valid @NonNull @RequestBody User userToUpdate){
//        userService.updateUser(id, userToUpdate);
//    }
}


//http://localhost:8080/review/all